<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="The following forms are permitted: -flag -flag=x -flag x non-boolean flags only One or two minus signs may be used; they are equivalent. The last form is not permitted for boolean flags because the meaning of the command cmd -x where is a Unix shell wildcard, will change if there is a file called 0, false, etc. You must use the -flag=false form to turn off a boolean flag. Flag parsing stops just before the first non-flag argument (&quot;-&quot; is a non-flag argument) or after the terminator &quot;--&quot;. Integer flags accept 1234, 0664, 0x1234 and may be negative. Boolean flags may be: 1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False Duration flags accept any input valid for time.ParseDuration. The default set of command-line flags is controlled by top-level functions. The FlagSet type allows one to define independent sets of flags, such as to implement subcommands in a command-line interface. The methods of FlagSet are analogous to the top-level functions for the command-line flag set." />
      <item value="Define flags using flag.String(), Bool(), Int(), etc. This declares an integer flag, -n, stored in the pointer nFlag, with type int: import &quot;flag&quot; var nFlag = flag.Int(&quot;n&quot;, 1234, &quot;help message for flag n&quot;) If you like, you can bind the flag to a variable using the Var() functions. var flagvar int func init() { flag.IntVar(&amp;flagvar, &quot;flagname&quot;, 1234, &quot;help message for flagname&quot;) } Or you can create custom flags that satisfy the Value interface (with pointer receivers) and couple them to flag parsing by flag.Var(&amp;flagVal, &quot;name&quot;, &quot;help message for flagname&quot;) For such flags, the default value is just the initial value of the variable. After all flags are defined, call flag.Parse() to parse the command line into the defined flags. Flags may then be used directly. If you're using the flags themselves, they are all pointers; if you bind to variables, they're values. fmt.Println(&quot;ip has value &quot;, ip) fmt.Println(&quot;flagvar has value &quot;, flagvar) After parsing, the arguments following the flags are available as the slice flag.Args() or individually as flag.Arg(i). The arguments are indexed from 0 through flag.NArg()-1. Command line flag syntax" />
      <item value="SIGABRT" />
      <item value="sigNoteSetup initializes an async-signal-safe note. The current implementation of notes on Darwin is not async-signal-safe, because the functions pthread_mutex_lock, pthread_cond_signal, and pthread_mutex_unlock, called by semawakeup, are not async-signal-safe. There is only one case where we need to wake up a note from a signal handler: the sigsend function. The signal handler code does not require all the features of notes: it does not need to do a timed wait. This is a separate implementation of notes, based on a pipe, that does not support timed waits but is async-signal-safe." />
      <item value="Key Up Gread" />
      <item value="白色" />
      <item value="相同" />
      <item value="confict In Node" />
      <item value="conficted" />
      <item value="Is Muti Node Account" />
      <item value="staticize" />
      <item value="motify" />
      <item value="Modify" />
      <item value="匹配" />
      <item value="Much" />
      <item value="Match" />
      <item value="Math" />
      <item value="Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests." />
      <item value="TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter)" />
      <item value="白名单" />
      <item value="Write" />
      <item value="revoke" />
      <item value="Delete records, bean's non-empty fields are conditions" />
      <item value="region" />
      <item value="TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter)." />
      <item value="Replace" />
      <item value="WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a LabeledMiddleware, which will receive the name of the endpoint. See LabeldMiddleware. See method WrapAllExept for details on excluded functionality." />
      <item value="Will panic. Shouldn't modify m." />
      <item value="An TTLKeyHeap is a min-heap of TTLKeys order by expiration time" />
      <item value="During the call to mapassign_fast64, the key argument was incorrectly treated as a uint64. If the stack was scanned during that call, the only pointer to k was missed, leading to k being collected prematurely." />
      <item value="Greeter" />
      <item value="OTP" />
      <item value="Best" />
      <item value="accomplish" />
      <item value="denied" />
      <item value="standby" />
      <item value="ambiguous" />
      <item value="ambiguous selector" />
      <item value="joint type" />
      <item value="NODE MANAGERR OLEID" />
      <item value="Apply" />
      <item value="granted" />
      <item value="unsubmitting" />
      <item value="Manager Moderation Status" />
      <item value="pending manager moderation" />
      <item value="archived" />
      <item value="pending" />
      <item value="Approve" />
      <item value="发起授权" />
      <item value="提出授权" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="87" />
        <entry key="ENGLISH" value="88" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="HUNGARIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1635822169645" />
  </component>
</application>