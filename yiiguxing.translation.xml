<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="424" />
    <option name="newTranslationDialogY" value="345" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="For example, the first comparison in the following code results false, but the second one causes a panic." />
      <item value="When comparing two array values, their elements will be compared one by one. Once two corresponding elements are found unequal, the whole comparison stops and a false result is resulted. The whole comparison might also stop for a panic produced when comparing two interfaces." />
      <item value="Array values are compared element by element" />
      <item value="Please try to [avoid putting a zero-size field as the final field of a struct type](1-syntax-and-sanmatics.mdfinal-zero-size-field)." />
      <item value="Lest the `_` fields waste memory, their types should be zero-size types. For example, the size of the type `Ty` is smaller than the type `Tx` in the following code." />
      <item value="It is easy, just put an incomparable field in the struct type. For example, the following struct types are all incomparable." />
      <item value="How to make a struct type incomparable" />
      <item value="For example, the following program prints three `false`, then panics." />
      <item value="Comparing two interface values produces a panic if the dynamic type of the two operands are identical and the identical type is an incomparable type" />
      <item value="Go 1.18 introduces custom generics, so there might be a `slices.Compare` function in future Go versions to compare slices with any comparable element types." />
      <item value="The two ways have no requirements on the lengths of the two operand byte slices." />
      <item value="The second way: `string(x) == string(y)`. Due to an optimization made by the official standard Go compiler, no underlying bytes will be duplicated in this way. In fact, the `bytes.Equal` function uses this way to do the comparison." />
      <item value="The first way: `bytes.Compare(x, y) == 0`." />
      <item value="FormatInt returns the string representation of i in the given base, for 2 &lt;= base &lt;= 36. The result uses the lower-case letters 'a' to 'z' for digit values &gt;= 10." />
      <item value="The above introduced way works for slices with any comparable element types. It certainly could be used to compare byte slices (which lengths are equal and known at coding time). Meanwhile, there are two other ways to compare byte slices `x` and `y`, even if the lengths of the two byte slices are not known at compile time." />
      <item value="More ways to compare byte slices" />
      <item value="The two lines compile okay." />
      <item value="The following two lines fail to compile." />
      <item value="In Go, slices are incomparable. But if the elements of two slices are comparable, then there is a way to compare the two slices (since Go version 1.17). Assume the elements of the two slices are identical and their lengths are equal and known at coding time, then we could use the following way to compare the two slices." />
      <item value="Compare two slices which lengths are equal and known at coding time" />
      <item value="Comparisons Related" />
      <item value="SearchInts searches for x in a sorted slice of ints and returns the index as specified by Search. The return value is the index to insert x if x is not present (it could be len(a)). The slice must be sorted in ascending order." />
      <item value="Package builder is a lightweight and fast SQL builder for Go and XORM. Make sure you have installed Go 1.8+ and then:" />
      <item value="Structs contains various utilities to work with Go (Golang) structs. It was initially used by me to convert a struct into a `map[string]interface{}`. With time I've added other utilities for structs. It's basically a high level package based on primitives from the reflect package. Feel free to add new functions or improve the existing code." />
      <item value="float32 &amp; float64 may be not inexact as conditions" />
      <item value="adapter" />
      <item value="transport" />
      <item value="传输" />
      <item value="运输" />
      <item value="The package name determines the name of the directories that truss creates for `package permission;` truss will create the directory &quot;permission-service&quot;" />
      <item value="关系" />
      <item value="Async" />
      <item value="AddUint64 atomically adds delta to addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint64(&amp;x, ^uint64(c-1))." />
      <item value="According to E-Prime, avoiding the use of the stative verb 'to be' makes the communication clearer, more accurate, and less dogmatic. Use an alternative verb. " />
      <item value="}" />
      <item value="is" />
      <item value="Tired of opening the browser for formatting and validating JSON? Why don't you install JSON Parser and do it inside IDE with offline support? JSON Parser is a lightweight plugin for validating and formatting JSON strings. Install and spread the word :)" />
      <item value="[WIP] beer-shop An online shop application, mono-repo microservices demo for kratos. 本项目为一个使用kratos框架创建的，简单的微服务电商项目。 由于example较碎片化，未能体现出完整的项目的样子，因此我们创建了本项目，以完成如下目标： 演示kratos在mono-repo中的项目结构实践（与layout创建出来的略有不同） 提供多个微服务之间互相依赖调用和样例 提供与各种基础设施集成和部署的样例 主要为kratos框架使用演示，很多组件的设计做了简化或模拟处理，与实际的电商项目有一定出入，仅供参考 具体架构请参考文档：[Docs](https:go-kratos.github.iobeer-shop) ATTENTION: This project is a Work-in-Progress. 注意，目前尚在开发，暂时无法运行，仅供代码参考。 Kratos Mono-Repo structure ``` . ├── api API&amp;Error Proto files &amp; Generated codes │   ├── foo │  │  ├── job │   │   └── service │   └── bar │      └── interface ├── app kratos microservices projects │   ├── foo │  │  ├── job │   │   └── service │   └── bar │     └── interface ├── pkg common used packages └── docs ```" />
      <item value="!evalphobia! stored the last executed query on this session beforeSQLExec func(string, ...interface{})" />
      <item value="Session keep a pointer to sql.DB and provides all execution of all kind of database operations." />
      <item value="MD5All reads all the files in the file tree rooted at root and returns a map from file path to the MD5 sum of the file's contents. If the directory walk fails or any read operation fails, MD5All returns an error." />
      <item value="WithContext returns a new Group and an associated Context derived from ctx. The derived Context is canceled the first time a function passed to Go returns a non-nil error or the first time Wait returns, whichever occurs first." />
      <item value="WriteLoop is a helper method that invokes Send every time the passed channel fires. This method blocks until ctx is canceled, so clients probably want to run it in its own goroutine. For typical usage, create a time.Ticker and pass its C channel to this method." />
      <item value="CloudWatchAPI is an interface that defines the set of Amazon CloudWatch API operations required by CloudWatch." />
      <item value="Send will fire an API request to CloudWatch with the latest stats for all metrics. It is preferred that the WriteLoop method is used." />
      <item value="CloudWatch receives metrics observations and forwards them to CloudWatch. Create a CloudWatch object, use it to create metrics, and pass those metrics as dependencies to the components that will use them. To regularly report metrics to CloudWatch, use the WriteLoop helper method." />
      <item value="Go calls the given function in a new goroutine. The first call to return a non-nil error cancels the group; its error will be returned by Wait." />
      <item value="A Group is a collection of goroutines working on subtasks that are part of the same overall task. A zero Group is valid and does not cancel on error." />
      <item value="Metadata is our way of representing request headers internally. They're used at the RPC level and translate back and forth from Transport headers." />
      <item value="WithValue returns a copy of parent in which the value associated with key is val. Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions. The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables' static type should be a pointer or interface." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="153" />
        <entry key="ENGLISH" value="154" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="HUNGARIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1641692186364" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>