<application>
  <component name="AppStorage">
    <option name="newTranslationDialogX" value="424" />
    <option name="newTranslationDialogY" value="345" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="SearchInts searches for x in a sorted slice of ints and returns the index as specified by Search. The return value is the index to insert x if x is not present (it could be len(a)). The slice must be sorted in ascending order." />
      <item value="Package builder is a lightweight and fast SQL builder for Go and XORM. Make sure you have installed Go 1.8+ and then:" />
      <item value="Structs contains various utilities to work with Go (Golang) structs. It was initially used by me to convert a struct into a `map[string]interface{}`. With time I've added other utilities for structs. It's basically a high level package based on primitives from the reflect package. Feel free to add new functions or improve the existing code." />
      <item value="float32 &amp; float64 may be not inexact as conditions" />
      <item value="adapter" />
      <item value="transport" />
      <item value="传输" />
      <item value="运输" />
      <item value="The package name determines the name of the directories that truss creates for `package permission;` truss will create the directory &quot;permission-service&quot;" />
      <item value="关系" />
      <item value="Async" />
      <item value="AddUint64 atomically adds delta to addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint64(&amp;x, ^uint64(c-1))." />
      <item value="According to E-Prime, avoiding the use of the stative verb 'to be' makes the communication clearer, more accurate, and less dogmatic. Use an alternative verb. " />
      <item value="}" />
      <item value="is" />
      <item value="Tired of opening the browser for formatting and validating JSON? Why don't you install JSON Parser and do it inside IDE with offline support? JSON Parser is a lightweight plugin for validating and formatting JSON strings. Install and spread the word :)" />
      <item value="[WIP] beer-shop An online shop application, mono-repo microservices demo for kratos. 本项目为一个使用kratos框架创建的，简单的微服务电商项目。 由于example较碎片化，未能体现出完整的项目的样子，因此我们创建了本项目，以完成如下目标： 演示kratos在mono-repo中的项目结构实践（与layout创建出来的略有不同） 提供多个微服务之间互相依赖调用和样例 提供与各种基础设施集成和部署的样例 主要为kratos框架使用演示，很多组件的设计做了简化或模拟处理，与实际的电商项目有一定出入，仅供参考 具体架构请参考文档：[Docs](https:go-kratos.github.iobeer-shop) ATTENTION: This project is a Work-in-Progress. 注意，目前尚在开发，暂时无法运行，仅供代码参考。 Kratos Mono-Repo structure ``` . ├── api API&amp;Error Proto files &amp; Generated codes │   ├── foo │  │  ├── job │   │   └── service │   └── bar │      └── interface ├── app kratos microservices projects │   ├── foo │  │  ├── job │   │   └── service │   └── bar │     └── interface ├── pkg common used packages └── docs ```" />
      <item value="!evalphobia! stored the last executed query on this session beforeSQLExec func(string, ...interface{})" />
      <item value="Session keep a pointer to sql.DB and provides all execution of all kind of database operations." />
      <item value="MD5All reads all the files in the file tree rooted at root and returns a map from file path to the MD5 sum of the file's contents. If the directory walk fails or any read operation fails, MD5All returns an error." />
      <item value="WithContext returns a new Group and an associated Context derived from ctx. The derived Context is canceled the first time a function passed to Go returns a non-nil error or the first time Wait returns, whichever occurs first." />
      <item value="WriteLoop is a helper method that invokes Send every time the passed channel fires. This method blocks until ctx is canceled, so clients probably want to run it in its own goroutine. For typical usage, create a time.Ticker and pass its C channel to this method." />
      <item value="CloudWatchAPI is an interface that defines the set of Amazon CloudWatch API operations required by CloudWatch." />
      <item value="Send will fire an API request to CloudWatch with the latest stats for all metrics. It is preferred that the WriteLoop method is used." />
      <item value="CloudWatch receives metrics observations and forwards them to CloudWatch. Create a CloudWatch object, use it to create metrics, and pass those metrics as dependencies to the components that will use them. To regularly report metrics to CloudWatch, use the WriteLoop helper method." />
      <item value="Go calls the given function in a new goroutine. The first call to return a non-nil error cancels the group; its error will be returned by Wait." />
      <item value="A Group is a collection of goroutines working on subtasks that are part of the same overall task. A zero Group is valid and does not cancel on error." />
      <item value="Metadata is our way of representing request headers internally. They're used at the RPC level and translate back and forth from Transport headers." />
      <item value="WithValue returns a copy of parent in which the value associated with key is val. Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions. The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables' static type should be a pointer or interface." />
      <item value="retrieve Worker" />
      <item value="PoolWithFunc accept the tasks from client,it limits the total of goroutines to a given number by recycling goroutines." />
      <item value="client credentials" />
      <item value="prepare Request Feature Map" />
      <item value="The append built-in function appends elements to the end of a slice. If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it does not, a new underlying array will be allocated. Append returns the updated slice. It is therefore necessary to store the result of append, often in the variable holding the slice itself: slice = append(slice, elem1, elem2) slice = append(slice, anotherSlice...) As a special case, it is legal to append a string to a byte slice, like this:" />
      <item value="DualStack previously enabled RFC 6555 Fast Fallback support, also known as &quot;Happy Eyeballs&quot;, in which IPv4 is tried soon if IPv6 appears to be misconfigured and hanging. Deprecated: Fast Fallback is enabled by default. To disable, set FallbackDelay to a negative value." />
      <item value="duplicate" />
      <item value="duplicated" />
      <item value="Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Package cobra is a commander providing a simple interface to create powerful modern CLI interfaces. In addition to providing an interface, Cobra simultaneously provides a controller to organize your application code." />
      <item value="记录" />
      <item value="延时" />
      <item value="延时记录" />
      <item value="Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2³¹-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use." />
      <item value="Intn returns, as an int, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &lt;= 0." />
      <item value="Credible" />
      <item value="Audit" />
      <item value="Adds support for EditorConfig files. Define code style settings using EditorConfig files Use coding assistance in EditorConfig files To create an EditorConfig file in a directory, right-click this directory and select New | EditorConfig File. Originally developed by Kirill Glazyrin and Kevin Bell." />
      <item value="Shows errors reported by TSLint in the editor Provides a quick fix (Alt-Enter) and an action (&quot;Fix TSLint Problems&quot;) to fix errors and warnings using TSLint Imports matching code style rules defined in the TSLint configuration to the IDE code style settings" />
      <item value="The following forms are permitted: -flag -flag=x -flag x non-boolean flags only One or two minus signs may be used; they are equivalent. The last form is not permitted for boolean flags because the meaning of the command cmd -x where is a Unix shell wildcard, will change if there is a file called 0, false, etc. You must use the -flag=false form to turn off a boolean flag. Flag parsing stops just before the first non-flag argument (&quot;-&quot; is a non-flag argument) or after the terminator &quot;--&quot;. Integer flags accept 1234, 0664, 0x1234 and may be negative. Boolean flags may be: 1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False Duration flags accept any input valid for time.ParseDuration. The default set of command-line flags is controlled by top-level functions. The FlagSet type allows one to define independent sets of flags, such as to implement subcommands in a command-line interface. The methods of FlagSet are analogous to the top-level functions for the command-line flag set." />
      <item value="Define flags using flag.String(), Bool(), Int(), etc. This declares an integer flag, -n, stored in the pointer nFlag, with type int: import &quot;flag&quot; var nFlag = flag.Int(&quot;n&quot;, 1234, &quot;help message for flag n&quot;) If you like, you can bind the flag to a variable using the Var() functions. var flagvar int func init() { flag.IntVar(&amp;flagvar, &quot;flagname&quot;, 1234, &quot;help message for flagname&quot;) } Or you can create custom flags that satisfy the Value interface (with pointer receivers) and couple them to flag parsing by flag.Var(&amp;flagVal, &quot;name&quot;, &quot;help message for flagname&quot;) For such flags, the default value is just the initial value of the variable. After all flags are defined, call flag.Parse() to parse the command line into the defined flags. Flags may then be used directly. If you're using the flags themselves, they are all pointers; if you bind to variables, they're values. fmt.Println(&quot;ip has value &quot;, ip) fmt.Println(&quot;flagvar has value &quot;, flagvar) After parsing, the arguments following the flags are available as the slice flag.Args() or individually as flag.Arg(i). The arguments are indexed from 0 through flag.NArg()-1. Command line flag syntax" />
      <item value="SIGABRT" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="129" />
        <entry key="ENGLISH" value="130" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="HUNGARIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1641259096031" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>