<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Persistent Flags" />
      <item value="Persistent" />
      <item value="This is an early release. I’ve been using it for a while and this is the third interface I’ve tried. I like this one pretty well, but no guarantees that it won’t change a bit." />
      <item value="verbose" />
      <item value="1. Replace all the println, printf, etc statements thought my code with something more useful 2. Allow the user to easily control what levels are printed to stdout 3. Allow the user to easily control what levels are logged 4. Provide an easy mechanism (like fmt.Println) to print info to the user which can be easily logged as well 5. Due to 2 &amp; 3 provide easy verbose mode for output and logs 6. Not have any unnecessary initialization cruft. Just use it." />
      <item value="1. Ready to go out of the box. 2. One library for both printing to the terminal and logging (to files). 3. Really easy to log to either a temp file or a file you specify." />
      <item value="Seamless printing to the terminal (stdout) and logging to a io.Writer (file) that’s as easy to use as fmt.Println. ![and_that__s_why_you_always_leave_a_note_by_jonnyetc-d57q7um](https:cloud.githubusercontent.comassets17341211002937ccd01654-847d-11e5-828e-12ebaf582eaf.jpg) Graphic by [JonnyEtc](http:jonnyetc.deviantart.comartAnd-That-s-Why-You-Always-Leave-a-Note-315311422) JWW is primarily a wrapper around the excellent standard log library. It provides a few advantages over using the standard log library alone. 1. Ready to go out of the box. 2. One library for both printing to the terminal and logging (to files). 3. Really easy to log to either a temp file or a file you specify." />
      <item value="Registrar registers instance information to a service discovery system when an instance becomes alive and healthy, and deregisters that information when the service becomes unhealthy or goes away. Registrar implementations exist for various service discovery systems. Note that identifying instance information (e.g. host:port) must be given via the concrete constructor; this interface merely signals lifecycle changes." />
      <item value="concrete constructor; this interface merely signals lifecycle changes." />
      <item value="Registrar" />
      <item value="mobile Phone" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="14" />
        <entry key="ENGLISH" value="15" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1624330605936" />
  </component>
</application>